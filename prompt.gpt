lib/mqttClient.ts
// lib/mqttClient.ts
import mqtt, { MqttClient } from "mqtt";

let client: MqttClient | null = null;

/**
 * Menginisialisasi koneksi MQTT jika belum ada koneksi atau koneksi sebelumnya terputus.
 * @returns {MqttClient} Koneksi MQTT client yang aktif.
 */
export function connectMQTT(): MqttClient {
  const brokerUrl = process.env.NEXT_PUBLIC_MQTT_BROKER_URL;

  if (!brokerUrl) {
    throw new Error("MQTT broker URL tidak didefinisikan di .env");
  }

  if (!client || client.disconnected) {
    client = mqtt.connect(brokerUrl, {
      clean: true,
      connectTimeout: 4000,
      reconnectPeriod: 1000,
    });
  }

  return client;
}

/**
 * Mendapatkan instance MQTT client yang sedang aktif (jika sudah terhubung).
 * @returns {MqttClient | null}
 */
export function getMQTTClient(): MqttClient | null {
  return client;
}


hooks/useMQTTStatus.ts

// hooks/useMQTTStatus.ts
"use client";

import { useEffect, useState } from "react";
import { connectMQTT } from "@/lib/mqttClient";

export function useMQTTStatus() {
  const [status, setStatus] = useState("connecting");

  useEffect(() => {
    const client = connectMQTT();

    const handleConnect = () => {
      console.log("✅ Connected to MQTT");
      setStatus("connected");
    };

    const handleError = (error: any) => {
      console.error("❌ MQTT Error", error);
      setStatus("error");
    };

    const handleClose = () => {
      console.warn("⚠️ MQTT Disconnected");
      setStatus("disconnected");
    };

    client.on("connect", handleConnect);
    client.on("error", handleError);
    client.on("close", handleClose);

    return () => {
      client.off("connect", handleConnect);
      client.off("error", handleError);
      client.off("close", handleClose);
    };
  }, []);

  return status;
}


mqtt-status.tsx

"use client";

import { useMQTTStatus } from "@/hooks/useMQTTStatus";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, AlertTriangle, XCircle, Loader2 } from "lucide-react";

export default function MQTTConnectionBadge() {
  const status = useMQTTStatus();

  const getStatusInfo = () => {
    switch (status) {
      case "connected":
        return {
          color: "bg-green-500",
          icon: <CheckCircle className="w-4 h-4 mr-1" />,
          label: "Connected",
        };
      case "disconnected":
        return {
          color: "bg-yellow-500",
          icon: <AlertTriangle className="w-4 h-4 mr-1" />,
          label: "Disconnected",
        };
      case "error":
        return {
          color: "bg-red-500",
          icon: <XCircle className="w-4 h-4 mr-1" />,
          label: "Error",
        };
      default:
        return {
          color: "bg-gray-400",
          icon: <Loader2 className="w-4 h-4 mr-1 animate-spin" />,
          label: "Connecting...",
        };
    }
  };

  const { color, icon, label } = getStatusInfo();

  return (
    <Badge className={`flex items-center ${color} text-white px-2 py-1`}>
      {icon}
      <span className="text-sm">{label}</span>
    </Badge>
  );
}


Modifikasi kode sebelumnya dan gunakan koneksi mqtt dari kode diatas menggunakan komponen, dan ubah button RotateCW nya menjadi putih dan button add device menjadi hitam